min_file_process_interval
   Number of seconds after which a DAG file is parsed. 
   The DAG file is parsed every min_file_process_interval number of seconds. 
   Updates to DAGs are reflected after this interval. Keeping this number low > increase CPU usage.

Create_dag
   To dynamically create DAGs from a file, we need to define a Python function that will
   generate the DAGs based on an input parameter. 
   In this case, we're going to define a DAG template within a create_dag function. 
   The code here is very similar to what you would use when creating a single DAG, 
   but it is wrapped in a method that allows for custom parameters to be passed in.
   Example
   
def create_dag(dag_id,
               schedule,
               dag_number,
               default_args):

   def hello_world_py(*args):
      print('Hello World')
      print('This is DAG: {}'.format(str(dag_number)))

   dag = DAG(dag_id,
             schedule_interval=schedule,
             default_args=default_args)

   with dag:
      t1 = PythonOperator(
               task_id='hello_world',
               python_callable=hello_world_py,
               dag_number=dag_number)

      return dag
      
#---from airflow.models import Variable
# Generate DAGs From Variables
# the input parameters don't have to exist in the DAG file itself. 
# Another common form of generating DAGs is by setting values in a Variable object.
number_of_dags = int(Variable.get('dag_number', default_var=3))

#---from airflow import settings
#---from airflow.models import Connection
# Generate DAGs From Connections
# Another way to define input parameters for dynamically generating DAGs 
# is by defining Airflow connections. 
# This can be a good option if each of your DAGs connects to a database or an API. 
# Because you will be setting up those connections anyway, 
# creating the DAGs from that source avoids redundant work.
# To implement this method, we can pull the connections we have in our Airflow metadata DB
# by instantiating the "Session" and querying the "Connection" table. 
# We can also filter this query so that it only pulls connections that match a certain criteria.
ses = settings.Session()
conns = (ses.query(Connection.conn_id)
               .filter(Connection.conn_id.ilike('%MY_DATABASE_CONN%'))
               .all())

for conn in conns:
   dag_id = 'connection_hello_world_{}'.format(conn[0])
   dag_number = conn
   globals()[dag_id] = create_dag(dag_id,
                                  schedule,
                                  dag_number,
                                  default_args)

# build a dag for each number in range(10)
for i in range(1, 4):
   dag_id = 'loop_hello_world_{}'.format(str(i))

   default_args = {'owner': 'airflow',
                   'start_date': datetime(2021, 1, 1)
                  }

   schedule = '@daily'
   dag_number = i

   globals()[dag_id] = create_dag(dag_id,
                                  schedule,
                                  dag_number,
                                  default_args)
                                  
                                 
                                  