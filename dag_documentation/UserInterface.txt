DAGs View
   To hide completed tasks set show_recent_stats_for_completed_runs = False
   In order to filter DAGs (e.g by team), you can add tags in each dag. 
   The filter is saved in a cookie and can be reset by the reset button. 
   Example
      dag = DAG("dag", tags=["team1", "sql"])
      
Task Instance Context Menu
   From the pages of (tree view, graph view, gantt, …), 
   it is always possible to click on a task instance, and get to this rich context menu
   that can take you to more detailed metadata, and perform some actions.
   
Graph View
   The graph view is perhaps the most comprehensive. 
   Visualize your DAG’s dependencies and their current status for a specific run.
   
TaskGroups
   A TaskGroup can be used to organize tasks into hierarchical groups in Graph view. 
   It is useful for creating repeating patterns and cutting down visual clutter.
   Unlike SubDAGs, TaskGroups are purely a UI grouping concept. 
   Tasks in TaskGroups live on the same original DAG, and honor all the DAG settings and pool configurations.
   Example
      with TaskGroup("group1") as group1:
         task1 = DummyOperator(task_id="task1")
         task2 = DummyOperator(task_id="task2")

      task3 = DummyOperator(task_id="task3")
      group1 >> task3

Edge Labels
   you can also label the dependency edges between different tasks in the Graph view 
   - this can be especially useful for branching areas of your DAG, 
   so you can label the conditions under which certain branches might run.
   To add labels, you can use them directly inline with the >> and << operators:
   Example
      from airflow.utils.edgemodifier import Label
      check >> Label("No errors") >> save >> report # or check.set_downstream(task, Label("No errors"))

Tree View
   The DAGs/tasks with a black border are scheduled runs,
   whereas the non-bordered DAGs/tasks are manually triggered, 
   i.e. by airflow dags trigger.

Calendar View
   The calendar view gives you an overview of your entire DAG’s history over months or years
   Letting you quickly see trends of the overall success/failure rate of runs over time.

Variable View
   The variable view allows you to list, create, edit or delete the key-value pair 
   of a variable used during jobs. Value of a variable will be hidden if the key contains
   any words in (‘password’, ‘secret’, ‘authorization’, ‘api_key’, ‘apikey’, ‘access_token’) 
   by default, but can be configured to show in clear-text. 
   
Gantt Chart
   The Gantt chart lets you analyse task duration and overlap. 
   You can quickly see bottlenecks and where the bulk of the time is spent for a DAG runs.

Task Duration
   The duration of your different tasks over the past N runs. 
   This view lets you find outliers and quickly understand where the time is spent 
   in your DAG over many runs.
   
Code View
   Transparency is everything. While the code for your pipeline is in source control, 
   this is quick way to get to the code that generates the DAG and provide yet more context.

