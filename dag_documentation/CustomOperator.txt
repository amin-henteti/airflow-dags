Custom Operator
   You can create any operator you want by extending 
   the airflow.models.baseoperator.BaseOperator class
   and we need to override 2 methods in the derived new class of the CustomOperator
      1) __init__ - Define the parameters required for the operator. 
      You only need to specify the arguments specific to your operator. 
      You can specify the default_args in the dag file. 
      
      2) execute - The code to execute when the runner calls the operator. 
      It contains the airflow context as a parameter that can be used to read config values.
      (we can use python callable which acts like the execute method
   So the custom operator is useful to define directly arguments when instantiating the task 
   Also MAYBE Custom operator is useful when dealing with database queries
   so that we dont always make connctions when instantiating the task 
   but only when it gets executed because the constructor gets called whenever Airflow 
   parses a DAG which happens frequently but execute method gets called only during DAG run)
   Example
      from airflow.models.baseoperator import BaseOperator
      class HelloOperator(BaseOperator):
         def __init__(self, name: str, **kwargs) -> None:
            super().__init__(**kwargs)
            self.name = name

         def execute(self, context):
            # Airflow context can be used to read config values
            message = f"Hello {self.name}"
            print(message)
            return message
      # If you have the file hello_operator.py within the plugins folder, 
      # you can import the operator as follows:
      from hello_operator import HelloOperator      

      with dag:
         hello_task = HelloOperator(task_id="sample-task", name="foo_bar")
   User interface
   Airflow also allows the developer to control how the operator shows up in the DAG UI.
   Override ui_color   to change the background color of the operator in UI.
   Override ui_fgcolor to change the color of the label.

   class HelloOperator(BaseOperator):
      ui_color = "#ff0000"
      ui_fgcolor = "#000000"
      # ...

